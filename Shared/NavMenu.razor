@using Model.State

@inject State state
@implements StateSubscriber

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Food Schedule</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @if (isLoggedIn) {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="schedule">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Schedule
                </NavLink>
            </li>
        }
        else {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="login" >
                    <span class="oi oi-home" aria-hidden="true"></span> Login
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="register">
                    <span class="oi oi-plus" aria-hidden="true"></span> Register
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool isLoggedIn = false;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected async override Task OnInitializedAsync() {
        state.Subscribe(this);
    }

    public void NotifyStateChanged() {
       isLoggedIn = state.IsLoggedIn; 
       base.StateHasChanged();
    }
}
